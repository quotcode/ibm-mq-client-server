Official IBM MQ Basics Blog
https://developer.ibm.com/learningpaths/ibm-mq-badge


-------------- Why do we need Message Queue?
Ans: We can use REST calls to communicate between two or more applications. 
Below are some disadvantages of REST calls for communication between applications...
1. if the number of applications increase or start to scale then it would be difficult to manage that. And it won't be a good idea to spend lot of resources just to manage the connection between these applications as developers need to be involved more in buiness logic part.
2. there's a chance of eavesdropping of data between rest calls which we don't want to let it happen for any kind of business data.
3. for rest calls both the parties have to be connected on HTTP to share data. But it won't be possible if they get disconnected.
4. also there are no disaster recovery of data if anything happens between the REST calls.

------------------------------------------- IBM MQ  -------------------------------------------------------------------------------------
For the above reasons we need a better alternative for communicating with the applications
1. IBM Message Queue is a form of "Asynchronous Messaging". i.e. both applications need not have to be in connection simultaneously. 
2. The consumer applications can process the messages anytime they are ready to do so. Regardless of the producer when it sends messages to the queue.
Advantage of IBM MQ
a. Communication
b. Security
c. Transactions
d. Persistence
e. Scalability
f. Recovery

Types of Message Queues
1. Point to Point or Exactly once messaging: One Application sends data and only one single other application consumes it
2. Pub-sub or Event Driven Messaging Architecture : When one application wants to tell multiple applications to do something
	This is possible using a Publish-Subscribe method where in an application will add the messages to a topic and 
	the other applications don't even know about the publishing app. So they are basically independent and they are interested in the messages thats it. 
	Example: Multiple users getting Flight updates. No user wants to know about who is sending or how many other users are there. They just want to get the information for their booked flight.
	
Important IBM MQ concepts:
1. Queue Managers: They are the brain of the MQ basically can be called as Messaging Servers. All queue managers together manage queues and topics. 
They can be deployed anywhere in containers, public cloud, or in raspberry pi as they are so lightweight.
2. Messaging mesh: It is a loosely coupled collection of interconnected Queue managers which is responsible for sending messages from endpoint to other by managing its way through the connected managers. So, the application has to talk to endpoint and the rest will be taken care by the Mesh and the message will arrive at other endpoint where other application is looking for that message.
3. Channels: Queue managers communicate with each other using Channels. 
4. Queue Manager clusters: the entire cluster work together to perform...
		a.Load balancing
		b.Data Replication
		c.Availability: Use standby queue managers incase of any manager going down.
5. Messaging Endpoints: these are nothing but the queues and topics on which the data or messages reside
6. Messaging Cluster: it is a collection of tightly coupled Queue Managers. 


----------------------------------------------------------------------------------------------------------------------------------------
Handson blog on Windows for IBM MQ


-- Installation and doing basic MQ setup
https://developer.ibm.com/tutorials/mq-connect-app-queue-manager-windows/

Local Machine IP Address: 192.168.0.103
Hostname: shivamy-CW6Z3F3

Windows Group : mqclient
User: mq_user_shivam   
Password: Password12345689


------ IBM MQ using CMD 
#### Working with Queue Managers
1. Create a Queue Manager
crtmqm <query_manager_name>
2. Start a Queue Manager
strmqm <query_manager_name>
3. Display all the Queue Managers in machine
dspmq -a [to display all the running queue managers]
dspmq [to display all the queue managers available on the user account]
4. Stop a Query Manager
endmqm -c <query_manager_name>
Note: -c: stans for controlled shutdown (normal shutdown). That is all the transactions running will complete and then only it will end or stop the QM. (This is a recommended and best practice to use everytime)
5. Delete a Query Manager
dltmqm <query_manager_name>
#### Setup the IBM MQ Server 
https://www.youtube.com/watch?v=my6gOWHl5B4&t=702s

Open CMD in Adminstrator mode
Start Messaging Queue Script Commands (MQSC) session where we will run other commands for QM server
runmqsc <query_manager_name>

Springboot IBM MQ Connection
https://github.com/adzubla/qmgrs/blob/master/dynamic-consumer/src/main/java/com/example/consumer/QmProperties.java


--- server connection channel for QM: SRC_QM
DEFINE CHANNEL(CHL_NEW) CHLTYPE(SVRCONN) TRPTYPE(TCP) DESCR('Server-connection to Client')
SET CHLAUTH(CHL_NEW) TYPE(ADDRESSMAP) ADDRESS('192.168.0.103') MCAUSER('mq_user_shivam')


--- client connection channel for QM: SRC_QM
DEFINE CHANNEL(CHL_NEW) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME(192.168.0.103) QMNAME(SRC_QM) DESCR('Client-connection to Server')



Springboot Application Details:
Consumer: cd C:\Users\Shivam Yadav\Desktop\SMTB\SMTB POC\smtb-ibm-mq-poc\ibm-mq-client-server\ibm-mq-practice\mqConsumer
